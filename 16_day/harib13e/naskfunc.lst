     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除	
     5                                  ;[INSTRSET "i486p"]				; 486の命令まで使いたいという記述 ; NASMではエラーが出るのでこの行削除
     6                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     7                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
     8                                  
     9                                  		; 以下、アンダーバー付き関数名からアンダーバー除いた関数名に修正する
    10                                  		; _io_hlt →　io_hlt など
    11                                  		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
    12                                  		GLOBAL	io_in8,  io_in16,  io_in32
    13                                  		GLOBAL	io_out8, io_out16, io_out32
    14                                  		GLOBAL	io_load_eflags, io_store_eflags
    15                                  		GLOBAL	load_gdtr, load_idtr
    16                                  		GLOBAL	load_cr0, store_cr0
    17                                  		GLOBAL	load_tr
    18                                  		GLOBAL	asm_inthandler20, asm_inthandler21
    19                                  		GLOBAL	asm_inthandler27, asm_inthandler2c
    20                                  		GLOBAL	memtest_sub
    21                                  		GLOBAL	farjmp
    22                                  		EXTERN	inthandler20, inthandler21
    23                                  		EXTERN	inthandler27, inthandler2c
    24                                  
    25                                  [SECTION .text]
    26                                  
    27                                  io_hlt:	; void io_hlt(void);
    28 00000000 F4                      		HLT
    29 00000001 C3                      		RET
    30                                  
    31                                  io_cli:	; void io_cli(void);
    32 00000002 FA                      		CLI
    33 00000003 C3                      		RET
    34                                  
    35                                  io_sti:	; void io_sti(void);
    36 00000004 FB                      		STI
    37 00000005 C3                      		RET
    38                                  
    39                                  io_stihlt:	; void io_stihlt(void);
    40 00000006 FB                      		STI
    41 00000007 F4                      		HLT
    42 00000008 C3                      		RET
    43                                  
    44                                  io_in8:	; int io_in8(int port);
    45 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    46 0000000D B800000000              		MOV		EAX,0
    47 00000012 EC                      		IN		AL,DX
    48 00000013 C3                      		RET
    49                                  
    50                                  io_in16:	; int io_in16(int port);
    51 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    52 00000018 B800000000              		MOV		EAX,0
    53 0000001D 66ED                    		IN		AX,DX
    54 0000001F C3                      		RET
    55                                  
    56                                  io_in32:	; int io_in32(int port);
    57 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    58 00000024 ED                      		IN		EAX,DX
    59 00000025 C3                      		RET
    60                                  
    61                                  io_out8:	; void io_out8(int port, int data);
    62 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    63 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    64 0000002E EE                      		OUT		DX,AL
    65 0000002F C3                      		RET
    66                                  
    67                                  io_out16:	; void io_out16(int port, int data);
    68 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    69 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    70 00000038 66EF                    		OUT		DX,AX
    71 0000003A C3                      		RET
    72                                  
    73                                  io_out32:	; void io_out32(int port, int data);
    74 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    75 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    76 00000043 EF                      		OUT		DX,EAX
    77 00000044 C3                      		RET
    78                                  
    79                                  io_load_eflags:	; int io_load_eflags(void);
    80 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    81 00000046 58                      		POP		EAX
    82 00000047 C3                      		RET
    83                                  
    84                                  io_store_eflags:	; void io_store_eflags(int eflags);
    85 00000048 8B442404                		MOV		EAX,[ESP+4]
    86 0000004C 50                      		PUSH	EAX
    87 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    88 0000004E C3                      		RET
    89                                  
    90                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    91 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    92 00000054 6689442406              		MOV		[ESP+6],AX
    93 00000059 0F01542406              		LGDT	[ESP+6]
    94 0000005E C3                      		RET
    95                                  
    96                                  load_idtr:		; void load_idtr(int limit, int addr);
    97 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    98 00000064 6689442406              		MOV		[ESP+6],AX
    99 00000069 0F015C2406              		LIDT	[ESP+6]
   100 0000006E C3                      		RET
   101                                  
   102                                  load_cr0:		; int load_cr0(void)
   103 0000006F 0F20C0                  		MOV		EAX,CR0
   104 00000072 C3                      		RET
   105                                  
   106                                  store_cr0:		; int store_cr0(void)
   107 00000073 8B442404                		MOV		EAX,[ESP+4]
   108 00000077 0F22C0                  		MOV		CR0, EAX
   109 0000007A C3                      		RET
   110                                  
   111                                  load_tr:		; void load_tr(int tr);
   112 0000007B 0F005C2404              		LTR		[ESP+4]			; tr
   113 00000080 C3                      		RET
   114                                  
   115                                  asm_inthandler20:
   116 00000081 06                      		PUSH	ES
   117 00000082 1E                      		PUSH	DS
   118 00000083 60                      		PUSHAD
   119 00000084 89E0                    		MOV		EAX,ESP
   120 00000086 50                      		PUSH	EAX
   121 00000087 668CD0                  		MOV		AX,SS
   122 0000008A 8ED8                    		MOV		DS,AX
   123 0000008C 8EC0                    		MOV		ES,AX
   124 0000008E E8(00000000)            		CALL	inthandler20
   125 00000093 58                      		POP		EAX
   126 00000094 61                      		POPAD
   127 00000095 1F                      		POP		DS
   128 00000096 07                      		POP		ES
   129 00000097 CF                      		IRETD
   130                                  
   131                                  asm_inthandler21:
   132 00000098 06                      		PUSH	ES
   133 00000099 1E                      		PUSH	DS
   134 0000009A 60                      		PUSHAD
   135 0000009B 89E0                    		MOV		EAX,ESP
   136 0000009D 50                      		PUSH	EAX
   137 0000009E 668CD0                  		MOV		AX,SS
   138 000000A1 8ED8                    		MOV		DS,AX
   139 000000A3 8EC0                    		MOV		ES,AX
   140 000000A5 E8(00000000)            		CALL	inthandler21
   141 000000AA 58                      		POP		EAX
   142 000000AB 61                      		POPAD
   143 000000AC 1F                      		POP		DS
   144 000000AD 07                      		POP		ES
   145 000000AE CF                      		IRETD
   146                                  
   147                                  asm_inthandler27:
   148 000000AF 06                      		PUSH	ES
   149 000000B0 1E                      		PUSH	DS
   150 000000B1 60                      		PUSHAD
   151 000000B2 89E0                    		MOV		EAX,ESP
   152 000000B4 50                      		PUSH	EAX
   153 000000B5 668CD0                  		MOV		AX,SS
   154 000000B8 8ED8                    		MOV		DS,AX
   155 000000BA 8EC0                    		MOV		ES,AX
   156 000000BC E8(00000000)            		CALL	inthandler27
   157 000000C1 58                      		POP		EAX
   158 000000C2 61                      		POPAD
   159 000000C3 1F                      		POP		DS
   160 000000C4 07                      		POP		ES
   161 000000C5 CF                      		IRETD
   162                                  
   163                                  asm_inthandler2c:
   164 000000C6 06                      		PUSH	ES
   165 000000C7 1E                      		PUSH	DS
   166 000000C8 60                      		PUSHAD
   167 000000C9 89E0                    		MOV		EAX,ESP
   168 000000CB 50                      		PUSH	EAX
   169 000000CC 668CD0                  		MOV		AX,SS
   170 000000CF 8ED8                    		MOV		DS,AX
   171 000000D1 8EC0                    		MOV		ES,AX
   172 000000D3 E8(00000000)            		CALL	inthandler2c
   173 000000D8 58                      		POP		EAX
   174 000000D9 61                      		POPAD
   175 000000DA 1F                      		POP		DS
   176 000000DB 07                      		POP		ES
   177 000000DC CF                      		IRETD
   178                                  
   179                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   180 000000DD 57                      		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   181 000000DE 56                      		PUSH	ESI
   182 000000DF 53                      		PUSH	EBX
   183 000000E0 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   184 000000E5 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   185 000000EA 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   186                                  mts_loop:
   187 000000EE 89C3                    		MOV		EBX,EAX
   188 000000F0 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   189 000000F6 8B13                    		MOV		EDX,[EBX]				; old = *p;
   190 000000F8 8933                    		MOV		[EBX],ESI				; *p = pat0;
   191 000000FA 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   192 000000FD 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   193 000000FF 7518                    		JNE		mts_fin
   194 00000101 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   195 00000104 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   196 00000106 7511                    		JNE		mts_fin
   197 00000108 8913                    		MOV		[EBX],EDX				; *p = old;
   198 0000010A 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   199 0000010F 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   200 00000113 76D9                    		JBE		mts_loop
   201 00000115 5B                      		POP		EBX
   202 00000116 5E                      		POP		ESI
   203 00000117 5F                      		POP		EDI
   204 00000118 C3                      		RET
   205                                  mts_fin:
   206 00000119 8913                    		MOV		[EBX],EDX				; *p = old;
   207 0000011B 5B                      		POP		EBX
   208 0000011C 5E                      		POP		ESI
   209 0000011D 5F                      		POP		EDI
   210 0000011E C3                      		RET
   211                                  
   212                                  farjmp		; void farjmp(int eip, int cs);
   212          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
   213 0000011F FF6C2404                		JMP		FAR		[ESP+4]			; eip, cs
   214 00000123 C3                      		RET
