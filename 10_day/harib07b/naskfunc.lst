     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除	
     5                                  ;[INSTRSET "i486p"]				; 486の命令まで使いたいという記述 ; NASMではエラーが出るのでこの行削除
     6                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     7                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
     8                                  
     9                                  		; 以下、アンダーバー付き関数名からアンダーバー除いた関数名に修正する
    10                                  		; _io_hlt →　io_hlt など
    11                                  		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
    12                                  		GLOBAL	io_in8,  io_in16,  io_in32
    13                                  		GLOBAL	io_out8, io_out16, io_out32
    14                                  		GLOBAL	io_load_eflags, io_store_eflags
    15                                  		GLOBAL	load_gdtr, load_idtr
    16                                  		GLOBAL	load_cr0, store_cr0
    17                                  		GLOBAL	asm_inthandler21, asm_inthandler27, asm_inthandler2c
    18                                  		GLOBAL	memtest_sub
    19                                  		EXTERN	inthandler21, inthandler27, inthandler2c
    20                                  
    21                                  [SECTION .text]
    22                                  
    23                                  io_hlt:	; void io_hlt(void);
    24 00000000 F4                      		HLT
    25 00000001 C3                      		RET
    26                                  
    27                                  io_cli:	; void io_cli(void);
    28 00000002 FA                      		CLI
    29 00000003 C3                      		RET
    30                                  
    31                                  io_sti:	; void io_sti(void);
    32 00000004 FB                      		STI
    33 00000005 C3                      		RET
    34                                  
    35                                  io_stihlt:	; void io_stihlt(void);
    36 00000006 FB                      		STI
    37 00000007 F4                      		HLT
    38 00000008 C3                      		RET
    39                                  
    40                                  io_in8:	; int io_in8(int port);
    41 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    42 0000000D B800000000              		MOV		EAX,0
    43 00000012 EC                      		IN		AL,DX
    44 00000013 C3                      		RET
    45                                  
    46                                  io_in16:	; int io_in16(int port);
    47 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    48 00000018 B800000000              		MOV		EAX,0
    49 0000001D 66ED                    		IN		AX,DX
    50 0000001F C3                      		RET
    51                                  
    52                                  io_in32:	; int io_in32(int port);
    53 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    54 00000024 ED                      		IN		EAX,DX
    55 00000025 C3                      		RET
    56                                  
    57                                  io_out8:	; void io_out8(int port, int data);
    58 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    59 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    60 0000002E EE                      		OUT		DX,AL
    61 0000002F C3                      		RET
    62                                  
    63                                  io_out16:	; void io_out16(int port, int data);
    64 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    65 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    66 00000038 66EF                    		OUT		DX,AX
    67 0000003A C3                      		RET
    68                                  
    69                                  io_out32:	; void io_out32(int port, int data);
    70 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    71 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    72 00000043 EF                      		OUT		DX,EAX
    73 00000044 C3                      		RET
    74                                  
    75                                  io_load_eflags:	; int io_load_eflags(void);
    76 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    77 00000046 58                      		POP		EAX
    78 00000047 C3                      		RET
    79                                  
    80                                  io_store_eflags:	; void io_store_eflags(int eflags);
    81 00000048 8B442404                		MOV		EAX,[ESP+4]
    82 0000004C 50                      		PUSH	EAX
    83 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    84 0000004E C3                      		RET
    85                                  
    86                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    87 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    88 00000054 6689442406              		MOV		[ESP+6],AX
    89 00000059 0F01542406              		LGDT	[ESP+6]
    90 0000005E C3                      		RET
    91                                  
    92                                  load_idtr:		; void load_idtr(int limit, int addr);
    93 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    94 00000064 6689442406              		MOV		[ESP+6],AX
    95 00000069 0F015C2406              		LIDT	[ESP+6]
    96 0000006E C3                      		RET
    97                                  
    98                                  load_cr0:		; int load_cr0(void)
    99 0000006F 0F20C0                  		MOV		EAX,CR0
   100 00000072 C3                      		RET
   101                                  
   102                                  store_cr0:		; int store_cr0(void)
   103 00000073 8B442404                		MOV		EAX,[ESP+4]
   104 00000077 0F22C0                  		MOV		CR0, EAX
   105 0000007A C3                      		RET
   106                                  
   107                                  asm_inthandler21:
   108 0000007B 06                      		PUSH	ES
   109 0000007C 1E                      		PUSH	DS
   110 0000007D 60                      		PUSHAD
   111 0000007E 89E0                    		MOV		EAX,ESP
   112 00000080 50                      		PUSH	EAX
   113 00000081 668CD0                  		MOV		AX,SS
   114 00000084 8ED8                    		MOV		DS,AX
   115 00000086 8EC0                    		MOV		ES,AX
   116 00000088 E8(00000000)            		CALL	inthandler21
   117 0000008D 58                      		POP		EAX
   118 0000008E 61                      		POPAD
   119 0000008F 1F                      		POP		DS
   120 00000090 07                      		POP		ES
   121 00000091 CF                      		IRETD
   122                                  
   123                                  asm_inthandler27:
   124 00000092 06                      		PUSH	ES
   125 00000093 1E                      		PUSH	DS
   126 00000094 60                      		PUSHAD
   127 00000095 89E0                    		MOV		EAX,ESP
   128 00000097 50                      		PUSH	EAX
   129 00000098 668CD0                  		MOV		AX,SS
   130 0000009B 8ED8                    		MOV		DS,AX
   131 0000009D 8EC0                    		MOV		ES,AX
   132 0000009F E8(00000000)            		CALL	inthandler27
   133 000000A4 58                      		POP		EAX
   134 000000A5 61                      		POPAD
   135 000000A6 1F                      		POP		DS
   136 000000A7 07                      		POP		ES
   137 000000A8 CF                      		IRETD
   138                                  
   139                                  asm_inthandler2c:
   140 000000A9 06                      		PUSH	ES
   141 000000AA 1E                      		PUSH	DS
   142 000000AB 60                      		PUSHAD
   143 000000AC 89E0                    		MOV		EAX,ESP
   144 000000AE 50                      		PUSH	EAX
   145 000000AF 668CD0                  		MOV		AX,SS
   146 000000B2 8ED8                    		MOV		DS,AX
   147 000000B4 8EC0                    		MOV		ES,AX
   148 000000B6 E8(00000000)            		CALL	inthandler2c
   149 000000BB 58                      		POP		EAX
   150 000000BC 61                      		POPAD
   151 000000BD 1F                      		POP		DS
   152 000000BE 07                      		POP		ES
   153 000000BF CF                      		IRETD
   154                                  
   155                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   156 000000C0 57                      		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   157 000000C1 56                      		PUSH	ESI
   158 000000C2 53                      		PUSH	EBX
   159 000000C3 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   160 000000C8 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   161 000000CD 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   162                                  mts_loop:
   163 000000D1 89C3                    		MOV		EBX,EAX
   164 000000D3 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   165 000000D9 8B13                    		MOV		EDX,[EBX]				; old = *p;
   166 000000DB 8933                    		MOV		[EBX],ESI				; *p = pat0;
   167 000000DD 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   168 000000E0 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   169 000000E2 7518                    		JNE		mts_fin
   170 000000E4 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   171 000000E7 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   172 000000E9 7511                    		JNE		mts_fin
   173 000000EB 8913                    		MOV		[EBX],EDX				; *p = old;
   174 000000ED 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   175 000000F2 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   176 000000F6 76D9                    		JBE		mts_loop
   177 000000F8 5B                      		POP		EBX
   178 000000F9 5E                      		POP		ESI
   179 000000FA 5F                      		POP		EDI
   180 000000FB C3                      		RET
   181                                  mts_fin:
   182 000000FC 8913                    		MOV		[EBX],EDX				; *p = old;
   183 000000FE 5B                      		POP		EBX
   184 000000FF 5E                      		POP		ESI
   185 00000100 5F                      		POP		EDI
   186 00000101 C3                      		RET
